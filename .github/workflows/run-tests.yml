name: Tests

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  workflow_dispatch:


jobs:
  tests-prepare:
    name: Prepare testing environment
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        cgreen: [1.4.1]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cache Unit Test framework (${{ runner.os }} ${{ matrix.compiler }})
        id: unit-test-framework
        uses: actions/cache@v3
        with:
          path: |
            cgreen
          key: ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-${{ matrix.compiler }}
          restore-keys: |
            ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-
      - name: Checkout Unit Test framework
        if: steps.unit-test-framework.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: cgreen-devs/cgreen
          ref: ${{ matrix.cgreen }}
          path: cgreen-src
      - name: Build Unit Test framework (${{ runner.os }} ${{ matrix.compiler }})
        if: steps.unit-test-framework.outputs.cache-hit != 'true'
        shell: bash
        env:
          CC: ${{ matrix.compiler }}
          CXX: ${{ matrix.compiler }}
        run: |
          [[ "${{ matrix.os }}" == "ubuntu-latest" ]] && apt-get install -y libmpfr-dev libmpc-dev
          cd cgreen-src
          mkdir -p build
          cd build
          cmake -DCGREEN_INTERNAL_WITH_GCOV:BOOL=ON ..
          make -j2
          cd "$GITHUB_WORKSPACE"
          mkdir -p cgreen
          mv cgreen-src/build cgreen/build
          mv cgreen-src/include cgreen/include
          rm -rf cgreen-src
  tests:
    name: Integration and Unit tests
    needs: tests-prepare
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        test_kind: [unit, integration]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Pull Unit Test framework cache (${{ runner.os }} ${{ matrix.compiler }})
        if: ${{ matrix.test_kind == 'unit' }}
        uses: actions/cache@v3
        with:
          path: |
            cgreen
          key: ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-${{ matrix.compiler }}
          restore-keys: |
            ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-
      - name: Pull Unit Test framework cache (${{ runner.os }} ${{ matrix.compiler }})
        if: ${{ matrix.test_kind == 'integration' }}
        uses: actions/cache@v3
        with:
          path: |
            cgreen
          key: ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-${{ matrix.compiler }}
          restore-keys: |
            ${{ runner.os }}-cgreen-${{ matrix.cgreen }}-
      - name: Run ${{ matrix.test_kind }} tests
        shell: bash
        env:
          CC: ${{ matrix.compiler }}
          CXX: ${{ matrix.compiler }}
        run: |
          [[ "${{ matrix.os }}" == "ubuntu-latest" ]] && pip install --user gcovr
          if [[ "${{ matrix.test_kind }}" == unit ]]; then
            cd "$GITHUB_WORKSPACE/core"
            make generate_report
            cd "$GITHUB_WORKSPACE/lib"
            make generate_report
          else
            cd "$GITHUB_WORKSPACE"
            make -f posix.mk
            posix/pubnub_fntest
            openssl/pubnub_fntest
            cpp/fntest_runner
            cpp/openssl/fntest_runner
          fi
  acceptance:
    name: Acceptance tests
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        shell: bash
        run: |
          apt-get install -y ninja-build libboost-all-dev libssl-dev
          gem install cucumber
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Checkout mock-server action
        uses: actions/checkout@v3
        with:
          repository: pubnub/client-engineering-deployment-tools
          ref: v1
          token: ${{ secrets.GH_TOKEN }}
          path: .github/.release/actions
      - name: Run mock server action
        uses: ./.github/.release/actions/actions/mock-server
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Pull Cucumber cache
        id: cucumber-cpp
        uses: actions/cache@v3
        with:
          path: |
            cucumber-cpp
          key: ${{ runner.os }}-cucumber-cpp-c79100eb70fbb34f6ea10030cec051c2cc9f7961
          restore-keys: |
            ${{ runner.os }}-cucumber-cpp-
      - name: Checkout Cucumber
        if: steps.cucumber-cpp.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: cucumber/cucumber-cpp
          ref: c79100eb70fbb34f6ea10030cec051c2cc9f7961
          path: cucumber-cpp-src
      - name: Build Cucumber
        if: steps.cucumber-cpp.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd ./cucumber-cpp-src
          cmake -B build -DCMAKE_BUILD_TYPE=Debug
          cmake --build build --config Debug
          cd "$GITHUB_WORKSPACE"
          mkdir -p cucumber-cpp
          mv cucumber-cpp-src/build cucumber-cpp/build
          mv cucumber-cpp-src/include cucumber-cpp/include
          rm -rf cucumber-cpp-src
      - name: Build acceptance tests
        shell: bash
        run: |
          cd cpp
          make -f posix_openssl.mk openssl/pubnub_sync
          cd "$GITHUB_WORKSPACE"
          g++ -std=c++11 -g -o BoostSteps.o -c features/step_definitions/BoostSteps.cpp -Icucumber-cpp/include -Icucumber-cpp/build/src/ -Iposix -Icore -I. -Icpp -D PUBNUB_CRYPTO_API=1 -D PUBNUB_USE_SSL=0
          g++ -o steps BoostSteps.o cpp/pubnub_sync.a cucumber-cpp/build/src/libcucumber-cpp.a -Lboost -lboost_unit_test_framework -lpthread -lboost_regex -lboost_thread -lboost_program_options -lboost_filesystem -lssl -lcrypto -D PUBNUB_USE_SSL=0
      - name: Run acceptance tests
        shell: bash
        env:
          PAM_PUB_KEY: "pub_key"
          PAM_SUB_KEY: "sub_key"
          PAM_SEC_KEY: "sec_key"
        run: |
          mv sdk-specifications/features/access features
          sudo python3 run_contract_tests.py features/access/grant-token.feature
          sudo python3 run_contract_tests.py features/access/revoke-token.feature
          ls -la results
      - name: Expose acceptance tests reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: acceptance-test-reports
          path: ./results/**
          retention-days: 7