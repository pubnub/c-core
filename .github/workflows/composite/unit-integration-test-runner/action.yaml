---
name: Tests runner
description: Unit and integration tests runner for multiple compiler types.
author: PubNub
inputs:
  os:
    description: Environment in which framework should be built.
    required: true
  version:
    description: "Which version of 'cgreen' should be built."
    required: true
  pubNubPubKey:
    description: "PubNub publish keys which should be used with integration tests"
    required: true
  pubNubSubKey:
    description: "PubNub subscribe keys which should be used with integration tests"
    required: true

runs:
  using: "composite"
  steps:
    - name: Prepare environments
      shell: bash
      run: |
        echo "PUBNUB_PUBKEY=${{ inputs.pubNubPubKey }}" >> $GITHUB_ENV
        echo "PUBNUB_KEYSUB=${{ inputs.pubNubSubKey }}" >> $GITHUB_ENV
    - name: Pull Unit Test framework ('${{ inputs.os }}' gcc, clang)
      uses: ./.github/workflows/composite/unit-test-framework
      with:
        os: ${{ inputs.os }}
        version: ${{ inputs.version }}
        compilers: gcc,clang
    - name: Prepare Unit Test framework ('${{ inputs.os }}' gcc)
      shell: bash
      run: |
        mv "$GITHUB_WORKSPACE/cgreen" "$GITHUB_WORKSPACE/cgreen-universal"
        cp -r "$GITHUB_WORKSPACE/cgreen-universal/gcc" "$GITHUB_WORKSPACE/cgreen"
    - name: Run unit tests ('${{ inputs.os }}' gcc)
      shell: bash
      env:
        CC: gcc
        CXX: "g++"
      run: |
        echo "::group::Run unit tests ('${{ inputs.os }}' gcc)"
        cd "$GITHUB_WORKSPACE/core"
        make clean generate_report
        cd "$GITHUB_WORKSPACE/lib"
        make clean generate_report
        echo "::endgroup::"
    - name: Run integration tests ('${{ inputs.os }}' gcc)
      shell: bash
      env:
        CC: gcc
        CXX: "g++"
      run: |
        echo "::group::Run integration tests ('${{ inputs.os }}' gcc)"
        cd "$GITHUB_WORKSPACE"
        
        if ! build="$(make -f posix.mk clean all 2>&1)"; then
          echo "::error file=posix.mk::Unable to build test suite: $build"
          exit 1
        fi
        [[ "$build" =~ "deprecated" ]] && echo "::warning title=deprecated::There is deprecated functions used in code."
        [[ "$build" =~ "not used" ]] && echo "::warning title=unused::There is unused variables and / or functions in code."
        echo "::debug title=build log::Integration tests build log: $build"
        
        posix/pubnub_fntest
        openssl/pubnub_fntest
        cpp/fntest_runner
        cpp/openssl/fntest_runner
        echo "::endgroup::"
    - name: Prepare Unit Test framework ('${{ inputs.os }}' clang)
      shell: bash
      run: |
        rm -rf "$GITHUB_WORKSPACE/cgreen"
        cp -r "$GITHUB_WORKSPACE/cgreen-universal/clang" "$GITHUB_WORKSPACE/cgreen"
    - name: Run unit tests ('${{ inputs.os }}' clang)
      shell: bash
      env:
        CC: clang
        CXX: "clang++"
      run: |
        echo "::group::Run unit tests ('${{ inputs.os }}' clang)"
        cd "$GITHUB_WORKSPACE/core"
        make clean generate_report
        cd "$GITHUB_WORKSPACE/lib"
        make clean generate_report
        echo "::endgroup::"
    - name: Run integration tests ('${{ inputs.os }}' clang)
      shell: bash
      env:
        CC: clang
        CXX: "clang++"
      run: |
        echo "::group::Run integration tests ('${{ inputs.os }}' clang)"
        cd "$GITHUB_WORKSPACE"
        
        if ! build="$(make -f posix.mk clean all 2>&1)"; then
          echo "::error file=posix.mk::Unable to build test suite: $build"
          exit 1
        fi
        [[ "$build" =~ "deprecated" ]] && echo "::warning title=deprecated::There is deprecated functions used in code."
        [[ "$build" =~ "not used" ]] && echo "::warning title=unused::There is unused variables and / or functions in code."
        echo "::debug title=build log::Integration tests build log: $build"
        
        make -f posix.mk clean all
        posix/pubnub_fntest
        openssl/pubnub_fntest
        cpp/fntest_runner
        cpp/openssl/fntest_runner
        echo "::endgroup::"
    - name: Restore Unit Test framework ('${{ inputs.os }}' gcc,clang)
      shell: bash
      run: |
        rm -rf "$GITHUB_WORKSPACE/cgreen"
        cp -r "$GITHUB_WORKSPACE/cgreen-universal" "$GITHUB_WORKSPACE/cgreen"